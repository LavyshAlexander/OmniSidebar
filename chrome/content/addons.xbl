<?xml version="1.0"?>
<!DOCTYPE bindings>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml">
  
	<binding id="text-link" extends="chrome://global/content/bindings/text.xml#text-label">
		<implementation implements="nsIAccessibleProvider">
			<property name="accessibleType" readonly="true">
				<getter>
					<![CDATA[
					return Components.interfaces.nsIAccessibleProvider.XULLink;
					]]>
				</getter>
			</property>
			<property name="href" onget="return this.getAttribute('href');"
				onset="this.setAttribute('href', val); return val;" />
			<method name="open">
				<parameter name="aEvent"/>
				<body>
					<![CDATA[
					var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						.getInterface(Components.interfaces.nsIWebNavigation)
						.QueryInterface(Components.interfaces.nsIDocShellTreeItem)
						.rootTreeItem
						.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
						.getInterface(Components.interfaces.nsIDOMWindow);
					
					var href = this.href;
					if (!href || this.disabled || aEvent.defaultPrevented)
						return;
					
					var uri = null;
					try {
						const nsISSM = Components.interfaces.nsIScriptSecurityManager;
						const secMan =
						     Components.classes["@mozilla.org/scriptsecuritymanager;1"]
						               .getService(nsISSM);
					
						const ioService =
						     Components.classes["@mozilla.org/network/io-service;1"]
						               .getService(Components.interfaces.nsIIOService);
						
						uri = ioService.newURI(href, null, null);
						
						var nullPrincipal =
						Components.classes["@mozilla.org/nullprincipal;1"]
						        .createInstance(Components.interfaces.nsIPrincipal);
						try {
							secMan.checkLoadURIWithPrincipal(nullPrincipal, uri,
							                               nsISSM.DISALLOW_INHERIT_PRINCIPAL)
						}
						catch (ex) {
							var msg = "Error: Cannot open a " + uri.scheme + ": link using \
							         the text-link binding.";
							Components.utils.reportError(msg);
							return;
						}
					
						const cID = "@mozilla.org/uriloader/external-protocol-service;1";
						const nsIEPS = Components.interfaces.nsIExternalProtocolService;
						var protocolSvc = Components.classes[cID].getService(nsIEPS);
						
						// if the scheme is not an exposed protocol, then opening this link
						// should be deferred to the system's external protocol handler
						if (!protocolSvc.isExposedProtocol(uri.scheme)) {
							protocolSvc.loadUrl(uri);
							aEvent.preventDefault()
							return;
						}
					
					}
					catch (ex) {
						Components.utils.reportError(ex);
					}
					
					// otherwise, fall back to opening the anchor directly
					var win = window;
					if (window instanceof Components.interfaces.nsIDOMChromeWindow) {
						while (win.opener && !win.opener.closed)
						win = win.opener;
					}
					
					if (uri) {
						try { mainWindow.gBrowser.selectedTab = mainWindow.gBrowser.addTab(uri.spec); }
						catch(ex) { win.open(uri.spec); }
					}
					else {
						try { mainWindow.gBrowser.selectedTab = mainWindow.gBrowser.addTab(href); }
						catch(ex) { win.open(href); }
					}
					
					aEvent.preventDefault();
					]]>
				</body>
			</method>
		</implementation>
		
		<handlers>
			<handler event="click" phase="capturing" button="0" action="this.open(event);"/>
			<handler event="keypress" preventdefault="true" keycode="VK_ENTER"  action="this.click()" />
			<handler event="keypress" preventdefault="true" keycode="VK_RETURN" action="this.click()" />
		</handlers>
	</binding>
</bindings>